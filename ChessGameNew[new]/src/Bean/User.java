package Bean;


import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;


import org.genericdao.PrimaryKey;






import jgravatar.Gravatar;
import jgravatar.GravatarDefaultImage;



/**
 * http://en.gravatar.com/site/implement/
 * User generated by hbm2java
 */
@PrimaryKey("userID")
public class User implements Comparable<User> {
	public static final List<String> EXTENSIONS = Collections
			.unmodifiableList(Arrays.asList(new String[] { ".jpg", ".gif",
					".JPG" }));
	private int userID;
	private String userName;
	private String email;
	private String password;
	private String profilePic;
	private int rank;
	private int totalGame=0;
	private int win=0;
	private int lost=0;
	private int draw=0;
	private int salt=0;
	
	public boolean checkPassword(String password1) {
		System.out.println("salt" + salt);
		System.out.println("check" + password1);
		System.out.println("hashcheck" + hash(password1));
		return password.equals(hash(password1));
	}

	public int getUserID() {
		return userID;
	}

	public String getPassword() {
		return password;
	}

	public String getUserName() {
		return userName;
	}

	public String getEmail() {
		return email;
	}


	public int getSalt() {
		return salt;
	}

	public int hashCode() {
		return email.hashCode();
	}

	public void setUserID(int i) {
		userID = i;
	}

	public void setPassword(String x) {
		password = x;
	}

	public void setPasswordx(String s) {
		salt = newSalt();
		System.out.println("salt" + salt);
		password = hash(s);
		System.out.println("password" + password);
	}

	public void setSalt(int x) {
		salt = x;
	}

	public void setUserName(String s) {
		userName = s;
	}

	public void setEmail(String s) {
		email = s;
	}


	private String hash(String clearPassword) {
		if (salt == 0)
			return null;

		MessageDigest md = null;
		try {
			md = MessageDigest.getInstance("SHA1");
		} catch (NoSuchAlgorithmException e) {
			throw new AssertionError(
					"Can't find the SHA1 algorithm in the java.security package");
		}

		String saltString = String.valueOf(salt);

		md.update(saltString.getBytes());
		md.update(clearPassword.getBytes());
		byte[] digestBytes = md.digest();

		// Format the digest as a String
		StringBuffer digestSB = new StringBuffer();
		for (int i = 0; i < digestBytes.length; i++) {
			int lowNibble = digestBytes[i] & 0x0f;
			int highNibble = (digestBytes[i] >> 4) & 0x0f;
			digestSB.append(Integer.toHexString(highNibble));
			digestSB.append(Integer.toHexString(lowNibble));
		}
		String digestStr = digestSB.toString();

		return digestStr;
	}

	private int newSalt() {
		Random random = new Random();
		return random.nextInt(8192) + 1; // salt cannot be zero
	}

	@Override
	public int compareTo(User other) {
		// Order first by lastName and then by firstName
		//int ranki=other.getRank();
		if(rank-other.getRank()==0){
			int c = userName.compareTo(other.userName);
			if (c != 0)
				return c;
		}
		return rank-other.getRank();
	}

	public boolean equals(Object obj) {
		if (obj instanceof User) {
			User other = (User) obj;
			return userName.equals(other.userName);
		}
		return false;
	}
	
	public String getProfilePic() {
		return profilePic;
	}

//	public void setProfilePic(String profilePic) {
//		this.profilePic = profilePic;
//	}

	public int getRank() {
		return rank;
	}

	public void setRank(int rank) {
		this.rank = rank;
	}

	public int getTotalGame() {
		return totalGame;
	}

	public void setTotalGame(int totalGame) {
		this.totalGame = totalGame;
	}

	public int getWin() {
		return win;
	}

	public void setWin(int win) {
		this.win = win;
	}

	public int getLost() {
		return lost;
	}

	public void setLost(int lost) {
		this.lost = lost;
	}

	public int getDraw() {
		return draw;
	}

	public void setDraw(int draw) {
		this.draw = draw;
	}
	
	
	public void setProfilePic(String url) {
		  this.profilePic = url;
	}
	
	public void setProfilePicx(String email) {
		  Gravatar gravatar = new Gravatar();
		  gravatar.setSize(120);
		  gravatar.setDefaultImage(GravatarDefaultImage.IDENTICON);
		  String url = gravatar.getUrl(email);
		  System.out.println(url);
		  this.profilePic = url;
	}

	public void setpersonalPic(String path){
		this.profilePic=path;	
	}
}
	
//	public byte[] profilePic(String ImageName){
//		File fnew=new File(ImageName);
//		BufferedImage originalImage;
//		try {
//			originalImage = ImageIO.read(fnew);
//		ByteArrayOutputStream baos=new ByteArrayOutputStream();
//		ImageIO.write(originalImage, "jpg", baos );
//		byte[] imageInByte=baos.toByteArray();
//		return imageInByte;
//		} catch (IOException e) {
//			// TODO Auto-generated catch block
//			return null;
//		}
//	}
	
//	private String ProfilePic(String email){
//		  Gravatar gravatar = new Gravatar();
//		  gravatar.setSize(120);
//		  gravatar.setDefaultImage(GravatarDefaultImage.IDENTICON);
//		  String url = gravatar.getUrl(email);
//		  System.out.println(url);
//		  //byte[] jpg = gravatar.download(email);
//	      return url;
//	}

//	  @SuppressWarnings("unused")
//	  private void setBlob(Blob imageBlob) {
//	    this.profilePic = toByteArray(imageBlob);
//	  }
//	  @SuppressWarnings("unused")
//	  private Blob getBlob(){
//	    return Hibernate.createBlob(this.profilePic);
//	  }
//	  
//	  private byte[] toByteArray(Blob fromImageBlob) {
//	    ByteArrayOutputStream baos = new ByteArrayOutputStream();
//	    try {
//	      return toByteArrayImpl(fromImageBlob, baos);
//	    } catch (Exception e) {
//	    }
//	    return null;
//	  }
//
//	  private byte[] toByteArrayImpl(Blob fromImageBlob,
//	      ByteArrayOutputStream baos) throws SQLException, IOException {
//	    byte buf[] = new byte[4000];
//	    int dataSize;
//	    InputStream is = fromImageBlob.getBinaryStream();
//
//	    try {
//	      while((dataSize = is.read(buf)) != -1) {
//	        baos.write(buf, 0, dataSize);
//	      }
//	    } finally {
//	      if(is != null) {
//	        is.close();
//	      }
//	    }
//	    return baos.toByteArray();
//	  }
//	


